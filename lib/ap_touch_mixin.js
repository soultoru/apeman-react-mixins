/**
 * Mixin to add touch handlers.
 * @constructor ApTouchMixin
 */

"use strict";

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TOUCH_HAMMER_KEY = "_apTouchHammer";

function createTouchHammer(node, props) {
    var Hammer = require('hammerjs'),
        hammer = new Hammer(node);
    if (props.touchOptions) {
        hammer.set(props.touchOptions);
    }
    Object.keys(ApTouchMixin.propTypes).filter(function (key) {
        return !!props[key];
    }).forEach(function (key) {
        if (/^on/.test(key)) {
            var event = key.replace(/^on/, '').toLowerCase();
            hammer.on(event, props[key]);
        }
        if (/Direction$/.test(key)) {
            var gesture = key.replace(/Direction$/, '');
            hammer.get(gesture).set({ direction: Hammer['DIRECTION_' + props[key]] });
        }
        if (/Threshold$/.test(key)) {
            var threshold = key.replace(/Threshold$/, '');
            hammer.get(threshold).set({ threshold: props[key] });
        }
    });
    return hammer;
}

function destroyTouchHammer(hammer) {
    if (!hammer) {
        return;
    }
    hammer.stop();
    hammer.destroy();
}

function supportsTouch(props) {
    var touchableKey = Object.keys(ApTouchMixin.propTypes);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.keys(props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            var hit = !! ~touchableKey.indexOf(key);
            if (hit) {
                return true;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return false;
}

/** Enum for touching */
var touchEnums = {
    directions: ['NONE', 'LEFT', 'RIGHT', 'UP', 'DOWN', 'HORIZONTAL', 'VERTICAL', 'ALL']
};

/** @lends ApTouchMixin */
var ApTouchMixin = {

    //--------------------
    // Custom
    //--------------------

    //--------------------
    // Specs
    //--------------------

    propTypes: {
        onTap: _react.PropTypes.func,
        onDoubleTap: _react.PropTypes.func,
        onPan: _react.PropTypes.func,
        onPanStart: _react.PropTypes.func,
        onPanMove: _react.PropTypes.func,
        onPanEnd: _react.PropTypes.func,
        onPanCancel: _react.PropTypes.func,
        onSwipe: _react.PropTypes.func,
        onPress: _react.PropTypes.func,
        onPressUp: _react.PropTypes.func,
        onPinch: _react.PropTypes.func,
        onPinchStart: _react.PropTypes.func,
        onPinchMove: _react.PropTypes.func,
        onPinchEnd: _react.PropTypes.func,
        onPinchCancel: _react.PropTypes.func,
        onRotate: _react.PropTypes.func,
        onRotateStart: _react.PropTypes.func,
        onRotateMove: _react.PropTypes.func,
        onRotateEnd: _react.PropTypes.func,
        onRotateCancel: _react.PropTypes.func,
        touchOptions: _react.PropTypes.object,
        panThreshold: _react.PropTypes.number,
        panDirection: _react.PropTypes.oneOf(touchEnums.directions),
        swipeDirection: _react.PropTypes.oneOf(touchEnums.directions)
    },

    statics: {},

    //--------------------
    // Lifecycle
    //--------------------

    componentWillMount: function componentWillMount() {},
    componentDidMount: function componentDidMount() {
        var s = this;
        var touchable = supportsTouch(s.props);
        if (touchable) {
            s[TOUCH_HAMMER_KEY] = createTouchHammer(ReactDOM.findDOMNode(s), s.props);
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var s = this;
    },
    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
        var s = this;
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        var s = this;
    },
    componentWillUnmount: function componentWillUnmount() {
        var s = this;
        var hammer = s[TOUCH_HAMMER_KEY];
        if (hammer) {
            destroyTouchHammer(hammer);
        }
        delete s[TOUCH_HAMMER_KEY];
    }
};

module.exports = Object.freeze(ApTouchMixin);
//# sourceMappingURL=data:application/json;base64,